import{_ as n,c as s,o as a,d as t}from"./app.87eb6f1c.js";const f='{"title":"nodejs \u64CD\u4F5C\u534E\u4E3Aobs","description":"","frontmatter":{},"headers":[],"relativePath":"thirdLib/nodejs \u64CD\u4F5C\u534E\u4E3Aobs.md"}',p={},o=t(`<h1 id="nodejs-\u64CD\u4F5C\u534E\u4E3Aobs" tabindex="-1">nodejs \u64CD\u4F5C\u534E\u4E3Aobs <a class="header-anchor" href="#nodejs-\u64CD\u4F5C\u534E\u4E3Aobs" aria-hidden="true">#</a></h1><div class="language-js"><pre><code><span class="token comment">// \u5F15\u5165obs\u5E93</span>
<span class="token comment">// \u4F7F\u7528npm\u5B89\u88C5</span>
<span class="token keyword">const</span> ObsClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;esdk-obs-nodejs&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;minimist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">string</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;v&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F680} ~ file: index.js ~ line 8 ~ args&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token keyword">const</span> version <span class="token operator">=</span> args<span class="token punctuation">.</span>v
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>version<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\u8BF7\u8F93\u5165version,\u5982\uFF1Anode src\\index.js -v 1.0.0&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u521B\u5EFAObsClient\u5B9E\u4F8B</span>
<span class="token keyword">const</span> obsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObsClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">access_key_id</span><span class="token operator">:</span> <span class="token string">&quot;***&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">secret_access_key</span><span class="token operator">:</span> <span class="token string">&quot;***&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token string">&quot;obs.cn-north-4.******.com&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> BucketName <span class="token operator">=</span> <span class="token string">&quot;cloudbroker-dev-test&quot;</span>
<span class="token keyword">const</span> brokerUiPath <span class="token operator">=</span> <span class="token string">&quot;F:/chinasoft/code/broker-ui/broker&quot;</span>

<span class="token comment">// \u4F7F\u7528\u8BBF\u95EEOBS</span>

obsClient<span class="token punctuation">.</span><span class="token function">headBucket</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">Bucket</span><span class="token operator">:</span> BucketName<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error--&gt;&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>CommonMsg<span class="token punctuation">.</span>Status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Bucket exists&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> uiPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>brokerUiPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token keyword">let</span> fileMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token function">eachDirPutFile</span><span class="token punctuation">(</span>uiPath<span class="token punctuation">,</span> fileMap<span class="token punctuation">)</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> fileMap<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">putObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> fileMap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              index <span class="token operator">+=</span> <span class="token number">1</span>
              <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F680} ~ file: index.js ~ line 43 ~ next ~ error&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>CommonMsg<span class="token punctuation">.</span>Status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Bucket does not exist&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">eachDirPutFile</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> fileMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">let</span> statRes <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statRes<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&quot;\u{1F680} ~ file: index.js ~ line 45 ~ res.forEach ~ temp&quot;, temp)</span>
      <span class="token function">eachDirPutFile</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> fileMap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      fileMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> dir<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> temp <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> brokerBucketName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>BucketName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/broker/cdn/broker-ui/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> newDir<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      brokerBucketName <span class="token operator">+=</span> newDir
    <span class="token punctuation">}</span>
    obsClient
      <span class="token punctuation">.</span><span class="token function">PutObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">Bucket</span><span class="token operator">:</span> brokerBucketName<span class="token punctuation">,</span> <span class="token comment">//\u6587\u4EF6\u8DEF\u5F84</span>
        <span class="token constant">ACL</span><span class="token operator">:</span> obsClient<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>AclPublicRead<span class="token punctuation">,</span> <span class="token comment">//\u516C\u5171\u8BFB</span>
        <span class="token literal-property property">Key</span><span class="token operator">:</span> fileName<span class="token punctuation">,</span> <span class="token comment">//\u5BF9\u8C61\u540D\u5B57</span>
        <span class="token comment">// Metadata: { key: &quot;aa&quot; },</span>
        <span class="token literal-property property">SourceFile</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token comment">// ContentType: &quot;application/json&quot;,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Status--&gt;&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>CommonMsg<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>CommonMsg<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;err:&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div>`,2),e=[o];function c(u,l,k,i,r,d){return a(),s("div",null,e)}var y=n(p,[["render",c]]);export{f as __pageData,y as default};
