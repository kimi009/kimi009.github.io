import{_ as n,c as s,o as a,d as t}from"./app.87eb6f1c.js";const m='{"title":"fs\u7528\u6CD5","description":"","frontmatter":{},"headers":[{"level":2,"title":"fs\u7528\u6CD5","slug":"fs\u7528\u6CD5"},{"level":2,"title":"\u6587\u672C\u9010\u884C\u8BFB\u5199\u529F\u80FD\u7684\u5B9E\u73B0","slug":"\u6587\u672C\u9010\u884C\u8BFB\u5199\u529F\u80FD\u7684\u5B9E\u73B0"}],"relativePath":"nodejs/fs.md"}',p={},o=t(`<h2 id="fs\u7528\u6CD5" tabindex="-1">fs\u7528\u6CD5 <a class="header-anchor" href="#fs\u7528\u6CD5" aria-hidden="true">#</a></h2><ul><li><p>readFile readFileSync</p><ul><li>\u8BFB\u6587\u4EF6\uFF0C\u6587\u4EF6\u5FC5\u987B\u5B58\u5728\uFF0C\u5426\u5219\u62A5\u9519\uFF0C\u9700\u8981\u589E\u52A0\u7F16\u7801\u6765\u8868\u793A\u8BFB\u53D6\u51FA\u6765\u7684\u7ED3\u679C</li></ul></li><li><p>writeFile writeFileSync</p><ul><li>\u5199\u5165\u65F6\u5982\u679C\u6587\u4EF6\u4E0D\u5B58\u5728\u4F1A\u521B\u5EFA\uFF0C\u5982\u679C\u6709\u4F1A\u5148\u6E05\u7A7A\u518D\u6B21\u5199\u5165\uFF0C\u5199\u5165\u7684\u6570\u636E\u9ED8\u8BA4\u662Futf-8\u7F16\u7801\u7684\u7C7B\u578B</li></ul></li><li><p>node\u81EA\u5DF1\u5C01\u88C5\u4E86\u6587\u4EF6\u6D41</p></li></ul><h2 id="\u6587\u672C\u9010\u884C\u8BFB\u5199\u529F\u80FD\u7684\u5B9E\u73B0" tabindex="-1">\u6587\u672C\u9010\u884C\u8BFB\u5199\u529F\u80FD\u7684\u5B9E\u73B0 <a class="header-anchor" href="#\u6587\u672C\u9010\u884C\u8BFB\u5199\u529F\u80FD\u7684\u5B9E\u73B0" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readLine <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> short <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;short-uuid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">readWriteFileByLine</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">readName<span class="token punctuation">,</span> writeName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>readName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>writeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	readLine<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">input</span><span class="token operator">:</span> readStream<span class="token punctuation">,</span>
		<span class="token literal-property property">output</span><span class="token operator">:</span> writeStream<span class="token punctuation">,</span>
		<span class="token literal-property property">terminal</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">readWriteFileByLineWithProcess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">readName<span class="token punctuation">,</span> writeName<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> endCallback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>readName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>writeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> readLineInterface <span class="token operator">=</span> readLine<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">input</span><span class="token operator">:</span> readStream<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	readLineInterface<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;line&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> rs <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
		writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>rs <span class="token operator">+</span> os<span class="token punctuation">.</span><span class="token constant">EOL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	readLineInterface<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endCallback <span class="token operator">&amp;&amp;</span> <span class="token function">endCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> staticDir <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;static/domain-js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> domainJsFileName <span class="token operator">=</span> staticDir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> newFileName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>short<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

	<span class="token function">readWriteFileByLineWithProcess</span><span class="token punctuation">(</span>
		<span class="token string">&#39;./k8s.yaml&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;./kimi.yaml&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>domainJsFileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> newLine <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>domainJsFileName<span class="token punctuation">,</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> newLine<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> line<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token string">&#39;./kimi.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./k8s.yaml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>
				path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;static/domain-js&#39;</span><span class="token punctuation">,</span> domainJsFileName<span class="token punctuation">)</span><span class="token punctuation">,</span>
				path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;static/domain-js&#39;</span><span class="token punctuation">,</span> newFileName<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">readWriteFileByLineWithProcess</span><span class="token punctuation">(</span>
		<span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;./index_temp.html&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>domainJsFileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> newLine <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>domainJsFileName<span class="token punctuation">,</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> newLine<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> line<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token string">&#39;./index_temp.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4),e=[o];function c(u,l,i,k,r,d){return a(),s("div",null,e)}var y=n(p,[["render",c]]);export{m as __pageData,y as default};
